# -*- coding: utf-8 -*-
"""DS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z-p9pqGTX7JtXG1o7XXD6jdTPsa3Bjn1



#1.Load the dataset
"""

from google.colab import files
uploaded = files.upload()

"""Load the dataset into a pandas DataFrame"""

import pandas as pd  #Import the pandas library for data handling

df = pd.read_csv('Students_Social_Media_Addiction.csv')  #Load the CSV file into a DataFrame

df.head()  #Show the first 5 rows of the dataset

import pandas as pd  #Import the pandas library for working with tabular data (DataFrames)
import matplotlib.pyplot as plt  #Import matplotlib for creating visualizations like plots and charts
import seaborn as sns  #Import seaborn for advanced and styled visualizations

df = pd.read_csv('Students_Social_Media_Addiction.csv')  #Read the CSV file into a DataFrame called 'df'

df.head()  #Display the first 5 rows of the DataFrame to preview the data

df.hist(figsize=(10, 8))  #Create histogram for all numeric columns in the DataFrame with a figure size of 10x8 inches

plt.tight_layout()  #Adjust layout so that plots fit nicely and donâ€™t overlap

plt.show()  #Display the histograms on the screen

plt.figure(figsize=(10, 8))  #Create a new figure for the plot with a size of 10x8 inches

sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
#A heatmap that shows correlations between numeric columns
#'annot=True' displays the correlation values in the cells
#'cmap="coolwarm"' sets the color scheme from cool (blue) to warm (red)

plt.title("Correlation Heatmap") #Title for the heatmap

plt.show()  #Display the heatmap

"""2. Check Data Types and Unique Values in Categorical Columns"""

df.dtypes #Check data types

categorical_columns = ['Gender', 'Academic_Level', 'Most_Used_Platform', 'Country', 'Relationship_Status', 'Conflicts_Over_Social_Media']
#Define a list of column names that are categorical (non-numeric)

for col in categorical_columns:
    #Loop through each column name in the list

    print(f"{col}: {df[col].nunique()} unique values")
    #For each column, print its name and the number of unique values it contains

"""3. Handle Missing Values"""

df.isnull().sum() #Check for missing values

df.dropna(inplace=True) #Drop rows with missing values (or use fillna if needed)

"""4. Descriptive Statistics for Numerical Columns"""

df.describe() #Describe numerical features

""" 5. Average of Average_Daily_Usage_Hours"""

df['Avg_Daily_Usage_Hours'].mean()  #Calculate and return the average mean of the values in the 'Avg_Daily_Usage_Hours' column

"""6. Most Popular Platform (with Visualization)

"""

platform_counts = df['Most_Used_Platform'].value_counts()  #Count how many times each platform appears in the 'Most_Used_Platform' column

plt.figure(figsize=(10, 8))  #Create a new figure with a size of 10x8 inches

sns.barplot(x=platform_counts.index, y=platform_counts.values)
#Create a bar plot where x = platform names, y = number of students using each platform

plt.title("Most Popular Social Media Platform")  #Add a title to the plot

plt.ylabel("Number of Students")  #Label the y-axis

plt.xticks(rotation=45)  #Rotate x-axis labels by 45 degrees for better readability

plt.show()  #Display the bar plot

""" 7. Daily Usage by Gender and Academic Level"""

plt.figure(figsize=(8, 5))  #Create a new figure for the plot with a size of 8x5 inches

sns.boxplot(x='Gender', y='Avg_Daily_Usage_Hours', data=df)
#Create a boxplot to show the distribution of daily usage hours for each gender

plt.title('Daily Usage Hours by Gender')  #Add a title to the plot

plt.show()  #Display the boxplot

plt.figure(figsize=(10, 6))  #Create a new figure with a size of 10x6 inches

sns.boxplot(x='Academic_Level', y='Avg_Daily_Usage_Hours', data=df)
#Create a boxplot showing distribution of daily usage hours for each academic level

plt.title('Daily Usage Hours by Academic Level')  #Add a title to the plot

plt.xticks(rotation=45)  #Rotate x-axis labels by 45 degrees for better readability

plt.show()  #Display the boxplot

"""8. Distribution of Impact on Academic Performance"""

plt.figure(figsize=(8, 5))  #Create a new figure with a size of 8x5 inches

sns.countplot(
    x='Affects_Academic_Performance',  #Set the x-axis to show categories from the 'Affects_Academic_Performance' column
    data=df,  #Use the DataFrame 'df' as the data source
    order=df['Affects_Academic_Performance'].value_counts().index  #Order bars by frequency (most common first)
)

plt.title('Impact on Academic Performance Distribution')  #Add a title to the plot

plt.show()  #Display the count plot

"""9. Average Sleep Hours by Impact Type"""

df.groupby('Affects_Academic_Performance')['Sleep_Hours_Per_Night'].mean()
#Group the data by 'Affects_Academic_Performance' and calculate the average sleep hours for each group

"""10. Average Addiction Score"""

df['Addicted_Score'].mean()  #Calculate and return the average (mean) of the 'Addicted_Score' column

"""11. Correlation Between Addiction Score and Daily Usage (with Scatter Plot)"""

df[['Addicted_Score', 'Avg_Daily_Usage_Hours']].corr()
#Compute the correlation coefficient between 'Addicted_Score' and 'Avg_Daily_Usage_Hours'
#This shows how strongly these two variables are related (positive, negative, or none)

#Scatter plot
plt.figure(figsize=(8, 5))  #Create a new figure with a size of 8x5 inches

sns.scatterplot(x='Avg_Daily_Usage_Hours', y='Addicted_Score', data=df)
#Create a scatter plot with daily usage hours on the x-axis and addiction score on the y-axis
#Each point represents one student

plt.title('Addiction Score vs Daily Usage Hours')  #Add a title to the plot

plt.show()  #Display the scatter plot

""" 12. Percentage Reporting Conflicts Over Social Media

"""

conflict_counts = df['Conflicts_Over_Social_Media'].value_counts(normalize=True) * 100
#Count the occurrences of each unique value in 'Conflicts_Over_Social_Media' column
#'normalize=True' converts counts to percentages
#Multiply by 100 to express as percentage values

conflict_counts  #Display the percentage of students who report conflicts over social media (Yes/No)

"""13. Difference in Usage/Addiction Score Between Conflict Groups"""

df.groupby('Conflicts_Over_Social_Media')[['Avg_Daily_Usage_Hours', 'Addicted_Score']].mean()
#Group the data based on whether students reported conflicts over social media (Yes/No)
#Then calculate the average daily usage hours and average addiction score for each group

"""**Intermediate Analysis**"""



"""1. Correlation Between Addiction, Mental Health, and Sleep Hours"""

corr_matrix = df[['Addicted_Score', 'Mental_Health_Score', 'Sleep_Hours_Per_Night']].corr()
#Calculate the correlation matrix between addiction score, mental health score, and sleep hours
#This shows how strongly each pair of these variables is related

plt.figure(figsize=(8, 6))  #Create a new figure with a size of 8x6 inches

sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
#Create a heatmap visualization of the correlation matrix
#'annot=True' displays the correlation coefficients in the cells
#'cmap="coolwarm"' uses a blue-red color scale
#'fmt=".2f"' formats the numbers to 2 decimal places

plt.title("Correlation: Addiction, Mental Health, Sleep")  #Add a title to the heatmap

plt.show()  #Display the heatmap

""" 2. Addiction Score by Platform"""

platform_addiction = df.groupby('Most_Used_Platform')['Addicted_Score'].mean().sort_values(ascending=False)
#Group the data by 'Most_Used_Platform' and calculate the average addiction score for each platform
#Sort the results from highest to lowest average addiction score

plt.figure(figsize=(10, 6))  #Create a new figure with a size of 10x6 inches

sns.barplot(x=platform_addiction.index, y=platform_addiction.values)
#Create a bar plot showing platforms on the x-axis and their average addiction scores on the y-axis

plt.xticks(rotation=45)  #Rotate x-axis labels for better readability

plt.ylabel('Average Addiction Score')  #Label the y-axis

plt.title('Addiction Score by Most Used Platform')  #Add a title to the plot

plt.show()  #Display the plot

"""3. Conflicts vs Usage and Addiction Score"""

conflict_comparison = df.groupby('Conflicts_Over_Social_Media')[['Avg_Daily_Usage_Hours', 'Addicted_Score']].mean()
#Group the data based on whether students reported conflicts over social media (Yes or No)
#For each group, calculate the average daily usage hours and average addiction score

conflict_comparison  #Display the resulting table with these averages for comparison

"""4. Relationship Status vs Usage/Addiction Score"""

relationship_comparison = df.groupby('Relationship_Status')[['Avg_Daily_Usage_Hours', 'Addicted_Score']].mean()
#Group the data by students' relationship status (e.g., Single, In a Relationship)
#For each group, calculate the average daily usage hours and average addiction score

relationship_comparison  #Display the resulting table with these averages for each relationship status

"""5. Clustering (K-Means) for Student Segments"""

from sklearn.cluster import KMeans  #Import KMeans algorithm for clustering
from sklearn.preprocessing import StandardScaler  #Import scaler to standardize features before clustering

X = df[['Avg_Daily_Usage_Hours', 'Addicted_Score', 'Sleep_Hours_Per_Night', 'Mental_Health_Score']].dropna()
#Create a new DataFrame X with selected columns and drop rows with missing values

scaler = StandardScaler()  #Create a scaler object
X_scaled = scaler.fit_transform(X)  #Fit scaler to X and transform X to standardized form

kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)  #Create KMeans object with 3 clusters
df['Cluster'] = kmeans.fit_predict(X_scaled)  #Assign cluster labels back to the original DataFrame

plt.figure(figsize=(8, 6))  #Create a new figure with size 8x6 inches
sns.scatterplot(
    data=df,
    x='Addicted_Score',
    y='Avg_Daily_Usage_Hours',
    hue='Cluster',
    palette='Set2'
)  #Scatter plot showing addiction score vs daily usage, colored by cluster
plt.title('Student Segments by Usage and Addiction')  #Add a title
plt.show()  #Display the plot

"""6. Addiction and Usage Across Countries"""

country_stats = df.groupby('Country')[['Addicted_Score', 'Avg_Daily_Usage_Hours']].mean().sort_values(by='Addicted_Score', ascending=False)
#Group data by 'Country' and calculate the average addiction score and daily usage hours for each country
#Then sort the result by addiction score in descending order

top_countries = country_stats.head(10)  #Select the top 10 countries with the highest average addiction score

plt.figure(figsize=(12, 6))  #Create a new figure with a size of 12x6 inches

sns.barplot(x=top_countries.index, y=top_countries['Addicted_Score'])
#Create a bar plot showing country names on the x-axis and their average addiction score on the y-axis

plt.title("Top 10 Countries by Average Addiction Score")  #Add a title to the plot

plt.xticks(rotation=45)  #Rotate x-axis labels by 45 degrees for readability

plt.show()  #Display the plot

"""7. Age & Academic Level Influence"""

plt.figure(figsize=(10, 5))  #Create a new figure with a size of 10x5 inches

sns.lineplot(x='Age', y='Addicted_Score', data=df, label='Addiction Score')
#Plot a line showing how average addiction score varies with age

sns.lineplot(x='Age', y='Avg_Daily_Usage_Hours', data=df, label='Daily Usage Hours')
#Plot a second line showing how average daily usage hours vary with age

plt.title("Age vs Addiction and Usage")  #Add a title to the plot

plt.legend()  #Show a legend to label the two lines

plt.show()  #Display the line plot

avg_usage = df['Avg_Daily_Usage_Hours'].mean()
#Calculate the average daily usage hours across all students

avg_addiction = df['Addicted_Score'].mean()
#Calculate the average addiction score across all students

conflict_pct = (df['Conflicts_Over_Social_Media'] > 0).mean() * 100
#Calculate the percentage of students reporting conflicts over social media
#(Assumes 'Conflicts_Over_Social_Media' is numeric where > 0 means 'Yes')

correlation = df[['Addicted_Score', 'Avg_Daily_Usage_Hours', 'Mental_Health_Score', 'Sleep_Hours_Per_Night']].corr()
#Compute the correlation matrix between addiction score, usage hours, mental health score, and sleep hours

print(f"Average Daily Usage Hours: {avg_usage:.2f}")
#Print average daily usage hours rounded to 2 decimal places

print(f"Average Addiction Score: {avg_addiction:.2f}")
#Print average addiction score rounded to 2 decimal places

print(f"Percentage Reporting Conflicts Over Social Media: {conflict_pct:.2f}%")
#Print percentage of students reporting conflicts, rounded to 2 decimal places

print("\nCorrelation Matrix:")
#Print a label before showing the correlation matrix

display(correlation)
#Display the correlation matrix nicely (works best in Jupyter Notebook)
